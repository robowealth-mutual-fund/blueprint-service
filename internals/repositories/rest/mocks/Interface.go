// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// ClientPostWithRetries provides a mock function with given fields: ctx, host, path, headers, request, entity, errorEntity
func (_m *Interface) ClientPostWithRetries(ctx context.Context, host string, path string, headers map[string]string, request interface{}, entity interface{}, errorEntity interface{}) error {
	ret := _m.Called(ctx, host, path, headers, request, entity, errorEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, interface{}, interface{}, interface{}) error); ok {
		r0 = rf(ctx, host, path, headers, request, entity, errorEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KXMPClientGet provides a mock function with given fields: ctx, host, path
func (_m *Interface) RestyClientGet(ctx context.Context, host string, path string) ([]byte, error) {
	ret := _m.Called(ctx, host, path)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, host, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, host, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, host, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KXMPClientPost provides a mock function with given fields: ctx, host, path, request
func (_m *Interface) RestyClientPost(ctx context.Context, host string, path string, request interface{}) ([]byte, error) {
	ret := _m.Called(ctx, host, path, request)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) ([]byte, error)); ok {
		return rf(ctx, host, path, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) []byte); ok {
		r0 = rf(ctx, host, path, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}) error); ok {
		r1 = rf(ctx, host, path, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
