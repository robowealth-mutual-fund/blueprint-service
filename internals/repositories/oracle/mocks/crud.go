// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/robowealth-mutual-fund/blueprint-service/internals/utils"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, filters, entity
func (_m *Interface) Count(ctx context.Context, filters interface{}, entity interface{}) (int64, error) {
	ret := _m.Called(ctx, filters, entity)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) (int64, error)); ok {
		return rf(ctx, filters, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) int64); ok {
		r0 = rf(ctx, filters, entity)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}) error); ok {
		r1 = rf(ctx, filters, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, entity
func (_m *Interface) Create(ctx context.Context, entity interface{}) (interface{}, error) {
	ret := _m.Called(ctx, entity)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (interface{}, error)); ok {
		return rf(ctx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, filters, entity
func (_m *Interface) Delete(ctx context.Context, filters interface{}, entity interface{}) error {
	ret := _m.Called(ctx, filters, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) error); ok {
		r0 = rf(ctx, filters, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, orderBy, selects, filters, entity
func (_m *Interface) Find(ctx context.Context, orderBy string, selects []string, filters interface{}, entity interface{}) ([]interface{}, error) {
	ret := _m.Called(ctx, orderBy, selects, filters, entity)

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, interface{}, interface{}) ([]interface{}, error)); ok {
		return rf(ctx, orderBy, selects, filters, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, interface{}, interface{}) []interface{}); ok {
		r0 = rf(ctx, orderBy, selects, filters, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, interface{}, interface{}) error); ok {
		r1 = rf(ctx, orderBy, selects, filters, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// First provides a mock function with given fields: ctx, orderBy, selects, filters, entity
func (_m *Interface) First(ctx context.Context, orderBy string, selects []string, filters map[string]interface{}, entity interface{}) error {
	ret := _m.Called(ctx, orderBy, selects, filters, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]interface{}, interface{}) error); ok {
		r0 = rf(ctx, orderBy, selects, filters, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Last provides a mock function with given fields: ctx, orderBy, selects, filters, entity
func (_m *Interface) Last(ctx context.Context, orderBy string, selects []string, filters map[string]interface{}, entity interface{}) error {
	ret := _m.Called(ctx, orderBy, selects, filters, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]interface{}, interface{}) error); ok {
		r0 = rf(ctx, orderBy, selects, filters, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, offset, limit, orderBy, selects, filters, entity
func (_m *Interface) List(ctx context.Context, offset int64, limit int64, orderBy string, selects []string, filters interface{}, entity interface{}) (*utils.Pagination, error) {
	ret := _m.Called(ctx, offset, limit, orderBy, selects, filters, entity)

	var r0 *utils.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, []string, interface{}, interface{}) (*utils.Pagination, error)); ok {
		return rf(ctx, offset, limit, orderBy, selects, filters, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, []string, interface{}, interface{}) *utils.Pagination); ok {
		r0 = rf(ctx, offset, limit, orderBy, selects, filters, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Pagination)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, []string, interface{}, interface{}) error); ok {
		r1 = rf(ctx, offset, limit, orderBy, selects, filters, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Raw provides a mock function with given fields: ctx, entity, sql, value
func (_m *Interface) Raw(ctx context.Context, entity interface{}, sql string, value ...interface{}) ([]interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, entity, sql)
	_ca = append(_ca, value...)
	ret := _m.Called(_ca...)

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) ([]interface{}, error)); ok {
		return rf(ctx, entity, sql, value...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) []interface{}); ok {
		r0 = rf(ctx, entity, sql, value...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r1 = rf(ctx, entity, sql, value...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, filters, entity
func (_m *Interface) Update(ctx context.Context, filters interface{}, entity interface{}) (interface{}, error) {
	ret := _m.Called(ctx, filters, entity)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) (interface{}, error)); ok {
		return rf(ctx, filters, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) interface{}); ok {
		r0 = rf(ctx, filters, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}) error); ok {
		r1 = rf(ctx, filters, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
